As of june 23, 2022, the best version of my ashos installer for justminimal (my new vision for the project) is: installery_justminimal.py


My vision: ashos should not be bugged down by providing desktop environments for billion DEs. DEs are just packages. With power of snapshotting, we only provide a solid minimal profile and AST will take care of DEs on top of that!

check XDG_RUNTIME_DIR and ssl-cert in that file iinx xfce
sudo sed -i '/backuppc/d' /var/lib/dpkg/statoverride resolved the initial issue with installing gnome (kind of but it fails for aome other reasons)

set /etc/hosts:
add {username}  127.0.0.1 to /etc/hosts

my assumption is that that error is because xfce and gnome share same /usr/shaxxxxxxxxxxxxxxxx

#1   Pre-installation
#1.1	Set the console keyboard layout
#1.2	Verify the boot mode
#1.3	Connect to the internet
#1.4	Update the system clock
#1.5	Partition the disks
#1.6	Format the partitions
#1.7	Mount the file systems
#2	Installation
#2.1	Select the mirrors
#2.2	Install essential packages
#3	Configure the system
#3.1	Fstab
#3.2	Chroot
#3.3	Time zone
#3.4	Localization
#3.5	Network configuration
#3.6	Initramfs
#3.7	Root password
#3.8	Boot loader
#4	Post-installation

What does ast tree look like when installing gnome or kde?
Is it:
0 - base node
    1 - gnome
Also, what is content of /mnt/usr/share/ast/snap? Is it 1?


add /etc/hosts as without it you'll get unable to resolve host explained

install multiple packages or package groups (whatever fedora calls them?!) using ast install







###################################### DEBIAN ETC ######################################

att20-mostyolo: eror: no /usr/share/ast/snap found

These are the last bugs left:
Initial step:
    mkdir: cannot create directory '/mnt/': File exists
    mount: /mnt: /dev/sda2 already mounted on /mnt.
mid-step:
    No diversion 'diversion of /usr/share/initramfs-tools/hooks/klibc to /usr/share/initramfs-tools/hooks/klibc^i-t by klibc-utils', none removed.
    W: An error occurred dring signature verification. GPG error: ftp.debian.org/debian bullseye InRelease: couldn't create temporary file /tmp/apt.conf.aNvw3l for passing config file to apt-key
    W: GPG error deb-multimedia.orf couldn't create temporary file
    solution might be either chmod 1777 /tmp or adding key
final step:
    No DKMS packages installed: not changing secure boot validation state.

Ideal ashos installer:
- Step 1: Do the ashos prep steps, mounts, folders, etc.
- Step 2: Use best/official installer for whatever os
- Step 3: Update fstab using ashos method (even if the official installer of that os has created/modified fstab)

PROBLEM/BUG:
- ast clone 0  (create tree number X)
- ast chroot X
- touch ~/tree-X.txt (inside chroot, create a file)
- exit
- ast deploy X
- reboot
- file tree-X.txt doesn't exist in ~ but rather it exists in /.snapshots/rootfs/snapshot-1/root/ (which is defined by -{variant} right now I think!

Find the latest commit (I think it is c28d408) before I did any crazy re-organization to debian/installer.py and compare. For any case of DesktopInstaller, do a line-by-line
mental execution of code step-by-step to make sure every step matches the original. I am hopeul it is.

commit# baa20d7 06/23 - 01:31:35 WAS NOT SUCCESSFUL FOR KDE <--- investigate if minimal works on it?

sudo apt-get remove -y --purge man-db

Tree Traversal in C

group wheel doesn't exist iin debian

even minimal install should share having non-root user functionality

in installer, the parts for desktopinstall can be done using functions from astpk.py because desktopinstall=1 includes 0 as base and then branching.

In a Debian package's control file, there is a Priority field which can be set to one of: required, important, standard, optional, extra

Combine all mkdir in one bunch

https://fekir.info/post/minimize-debian/
localepurge 

Unwanted files, like most of the files from the following sections, can be removed at install time by using dpkg filters, see dpkg(1) --path-exclude and --path-include options.

set_password("root") didn't for gnome debian install?!!!!!!!!!!!!!

questions:
os.system("sudo cp --reflink=auto -r /mnt/.snapshots/boot/boot-tmp/* /mnt/boot") #why umounted /mnt/boot and then do this?
os.system(f"sudo mkdir -p /mnt/.snapshots/var/var-tmp/lib/{i}")   # i didn't have sudo here before, so probbly wasn't creating these folders!

bug at unmounting at the end: /mnt/dev was mounted twice!!!!! so had to unmount it twice so I can unmount /mnt

ToDo:
make astpk.py more modular and therefore more common, so that it can be shared among different distro. The uncommon lines of code can maybe exported to another python file?
Use cdebootstrap/multistrap instead of debootstrap?
- better logging mechanism, better than appending ' | tee -a $HOME/ash.log' to all os.system commands?

https://unix.stackexchange.com/questions/219253/the-most-minimal-debian-sid-installed-with-debootstrap
$ dpkg-query -f '${binary:Package} ${Priority}\n' -W | grep -w 'required\|important' > /etc/apt/sources.list
os.system("echo 'dpkg-query -f "'"'"${binary:Package} ${Priority}\\n"'"'" -W | grep -w "'"'"required\|important"'"'"' | tee -a /home/me/cmDELs.list")

# steps to do apt-get install inside chroot

installer.py make code chunks as def/functions as much as possible

if you choose no for was passport set properly, it throws an error that username is incorrect and it is a forver loop of crap, only way out is ctrl-z

is there ast under /mnt ???????????????? why? because of mountpoints scrambled? /mnt/ast
/mnt busy: fuser -v /path


To make sure that you see a warning while using an insecure repository, better use allow-insecure=yes instead of [trusted=yes] like below
deb [ allow-insecure=yes ] ...

echo "export LC_ALL=C" | tee -a $HOME/.profile
echo "export LC_ALL=C" | sudo tee -a /mnt/root/.profile

add user to minimal-profile too

update grub.cfg for debian

https://distro.readthedocs.io/en/latest/#id4

sudo apt-get -o Dpkg::Options::="--force-overwrite" install <package-name>



grab image from apt-cache instead of fixed linux-image-5.10.0-13-amd64

ast tree of many distributions
 base 0: Arch
 -- snapshot 01: Arch - xfce
 -- snapshot 02: Arch - gnome
 base 1: Debian
 -- snapshot 11: Debian - xfce
 -- snapshot 12: Debian - gnome

put all definitions and if conditions up top in main and astpk.py so step1 to step7 are better deletable

#/proc and /sysfs must be mounted (or mountable), /dev/pts is also recommended.

https://github.com/libguestfs/supermin
febootstrap / supermin lovely

Update desktop installl 1 and 2 for debian

### <- these are REALLY NOT NEEDED. I tested in my attempt3.

###    ##Do these in the live system (not needed inside chroot)
###    #sudo systemctl start systemd-timesyncd (not presebt in my debian!!!!)
    
    # sync time in the live environment (maybe not needed after all!
    #sudo apt-get install -y ntp
    #sudo systemctl enable --now ntp && sleep 30s && ntpq -p #sometimes it's needed to restart ntp service to have time sync again!
###    #sudo hwclock --systohc (not needed most probably)
    
###    #sync time in chroot (needed to download python3-anytree) #these two lines are probably not needed (test next time)    
###    # date_host=$(date '+%Y-%m-%d-%H:%M:%S') sudo -E chroot /mnt /bin/bash -c 'date -s $date_host'
###    #sudo chroot /mnt date -s "2022-06-17 14:25:00"
    
###    #os.system("sudo wget http://bit.ly/3xV2F5o -O /mnt/tmp/anytree")
###    #os.system("sudo chroot /mnt dpkg -i /tmp/anytree")
    #os.system("echo "deb http://www.deb-multimedia.org bullseye main" | sudo tee -a /mnt/etc/apt/sources.list.d/multimedia.list > /dev/null
    #os.system("sudo chroot /mnt apt update -oAcquire::AllowInsecureRepositories=true")
    #os.system("sudo chroot /mnt apt-get install deb-multimedia-keyring") # NOT NEEDED as it says already installed (revisison: needed if not installing from bit.ly)
#NOT SURE IF NEEDED    #os.system("sudo chroot /mnt apt-get install ca-certificates") # I believe this is needed! <--- running this spits out error that log cannot be written and complains /dev/pts not mounted, so I think I should do the 4 mounts before doing this.
    #os.system("sudo chroot /mnt apt-get install python3-anytree")
    




chroot /home/mayank/chroot/codebase /bin/bash <<"EOT"
cd /tmp/so
ls -l
echo $$
EOT



--------------------------------------------------------

apt -o RootDir=/foo ...
dpkg --root=/tmp/dpkgRootDir option, and aptâ€™s RootDir setting. Both of these 
https://searchcode.com/file/94878737/config-files/apt.conf/
https://askubuntu.com/questions/196059/how-to-modify-settings-in-apt-conf-file-that-no-longer-exists-in-12-04
https://www.linuxquestions.org/questions/debian-26/changing-apt-and-dpkg-paths-with-apt-conf-via-$apt_config-4175592224/


/et/apt/apt.comf
Dir {
    RootDir "XYZ";
};

--------------------------------------------------------


# This post helped to fix the "efi variable not available in this system" error: https://bbs.archlinux.org/viewtopic.php?id=168516






# find distro
https://stackoverflow.com/questions/43540782/python-use-different-function-depending-on-os



Add bedrock linux to https://distro.readthedocs.io/en/latest/
https://bedrocklinux.org/1.0beta2/strata.html
Fedora Rawhide with ash

In astpk.py, if we add sudo at the beginning of all commands, maybe it'll make it so non-root users with sudoers privelge can run ast too (which is good)
https://manpages.debian.org/bullseye/multistrap/multistrap.1.en.html

Debiash:
#https://forum.openmediavault.org/index.php?thread/12070-guide-debootstrap-installing-debian-into-a-folder-in-a-running-system/



Gentash Linux
Fedorash Linux
Slash Linux (slackware)
OpenBSDash
NetBSDash
FreeBSDash
Centash




https://github.com/saltstack/salt/blob/master/salt/grains/core.py#L1624




sudo apt-get purge <PACKAGENAME>
sudo apt-get purge $(apt-cache depends <PACKAGENAME> | awk '{ print $2 }' | tr '\n' ' ')
sudo apt-get autoremove





what is left:
do step 2 but until chmod ing /mnt/tmp

stop there and go to the example vm, and try installing something. If permission error on tmp, then that tmp chmod is needed, otherwise just remove that commented line


tautology





--------------- lines removed from source files to make it smaller --------------------------------------------------------


###    #os.system(f'sudo chroot /mnt /bin/sh -c "LC_ALL=C apt-get install -y linux-image-{ARCH}"')

### THIS LINE IS MOVED DOWN (my recent PR fix)    os.system("sudo chroot /mnt btrfs sub set-default /.snapshots/rootfs/snapshot-tmp") #This gives the error, should likely be moved to line 206

    #Note: After changing the default subvolume on a system with GRUB, you should run grub-install again to notify the bootloader of the changes.
    #Changing the default subvolume with btrfs subvolume set-default will make the top level of the filesystem inaccessible, except by use of the subvol=/ or subvolid=5 mount options [6].






#   os.system("sudo chroot /mnt modprobe efivarfs") THis may NOT be needed as when I ran without it, I got a warning: "EFI variables are not supported on this system"

    print("echo 'Installing ntp. It will pause 30s. Sometimes it's needed to restart ntp service to have time sync again'")


#   os.system("sudo chroot /mnt modprobe efivarfs") THis may NOT be needed as when I ran without it, I got a warning: "EFI variables are not supported on this system"
    os.system("sudo mount -o bind /sys/firmware/efi/efivars /mnt/sys/firmware/efi/efivars") #maybe move this up top when I am doing all the other mountings


#    os.system("umount /mnt/var")

#    os.system("cp --reflink=auto -r /mnt/.snapshots/var/var-tmp/* /mnt/var")

#    os.system("mkdir /mnt/.snapshots/etc/etc-tmp")

#    os.system("mkdir /mnt/.snapshots/var/var-tmp")
#    os.system("mkdir /mnt/.snapshots/boot/boot-tmp")
#    os.system(f"mount {args[1]} -o subvol=@var,compress=zstd,noatime /mnt/.snapshots/var/var-tmp")

#    os.system("sudo umount /mnt/dev") #not existing (maybe not needed?)
#    os.system("sudo umount /mnt/proc") #not existing (maybe not needed?)
#    os.system("sudo umount /mnt/sys") #not existing (maybe not needed?)

    os.system("sudo umount -R /mnt")   #gives error /mnt target busy --- maybe I should use: sudo umount -R /mnt/*
#    os.system(f"sudo mount {args[1]} /mnt")
#os.system(f"sudo mount {args[1]} -o subvolid=5 /mnt")
###    os.system("sudo btrfs sub del /mnt/@") # it gives an error could not statfs: No such file or directory (could not statfs, no such file or directory)
#    os.system("sudo umount -R /mnt")
#    clear()
#    print("Installation complete")
#    print("You can reboot now :)")



----------------------------------------------------------------------------------------------------------------
visceral


bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"












sudo apt-get clean
sudo apt-get autoclean




moolah = money for mollahs


zfs snapshots for bsdashos

regarding extending support to oses  that don;t support btrfs: is it possibke to have a portion of disk formtateted as btrfs for ashos and taht would act
as pointer, keeypign track of what is what and where. Something like MBR, keeping addresses on btrfs but the acual file system could be anything (xfs, ext3, dragonfly etc)




open one of the vms debiast and see if all mountponnt are combined and scrambled even ferom before instaklers?


the reason Im not deleting the temporary debian-ashos-installer vms is if I have some interesting useful commands in thier the bash history




regex for removing unnecessary f-strings when not needed: f"[^{]*"



####################################################################################




###################################### GENTOO ######################################
You may have missed some installation steps. The emerge command is not available in the LiveCD environment, it is in the stage tarball(s).

After booting the LiveCD, you need to setup your partitions / filesystems, unpack a stage tarball, and chroot into it, then you will be able to use the emerge command.

####################################################################################



green sleeves song



>>> subprocess.check_output(
...     "ifconfig en0 | awk '{ print $2}' | "
...     "grep -E -o '([0-9]{1,3}[\.]){3}[0-9]{1,3}' | "
...     "tr -d '\n'", shell=True)
'172.17.174.160'












Maybe beter descriptionfor these:
print(f"Branch {i} was added to parent of {snapshot}.")
print(f"Branch {i} was added under snapshot {snapshot}.")








-------- FreeBSD ----------
https://www.youtube.com/watch?v=s1WvmIW_b8o
---------------------------
