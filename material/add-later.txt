$ dpkg-query -f '${binary:Package} ${Priority}\n' -W | grep -w 'required\|important' > ~/sources.list
os.system("echo 'dpkg-query -f "'"'"${binary:Package} ${Priority}\\n"'"'" -W | grep -w "'"'"required\|important"'"'"' | tee -a /home/me/cmDELs.list")

# steps to do apt-get install inside chroot

installer.py make code chunks as def/functions as much as possible

if you choose no for was passport set properly, it throws an error that username is incorrect and it is a forver loop of crap, only way out is ctrl-z

is there ast under /mnt ???????????????? why? because of mountpoints scrambled? /mnt/ast
/mnt busy: fuser -v /path


To make sure that you see a warning while using an insecure repository, better use allow-insecure=yes instead of [trusted=yes] like below
deb [ allow-insecure=yes ] ...

echo "export LC_ALL=C" | tee -a $HOME/.profile
echo "export LC_ALL=C" | sudo tee -a /mnt/root/.profile

add user to minimal-profile too

update grub.cfg for debian

https://distro.readthedocs.io/en/latest/#id4

sudo apt-get -o Dpkg::Options::="--force-overwrite" install <package-name>



grab image from apt-cache instead of fixed linux-image-5.10.0-13-amd64

ast tree of many distributions
 base 0: Arch
 -- snapshot 01: Arch - xfce
 -- snapshot 02: Arch - gnome
 base 1: Debian
 -- snapshot 11: Debian - xfce
 -- snapshot 12: Debian - gnome

put all definitions and if conditions up top in main and astpk.py so step1 to step7 are better deletable

#/proc and /sysfs must be mounted (or mountable), /dev/pts is also recommended.

https://github.com/libguestfs/supermin
febootstrap / supermin lovely

Update desktop installl 1 and 2 for debian

### <- these are REALLY NOT NEEDED. I tested in my attempt3.

###    ##Do these in the live system (not needed inside chroot)
###    #sudo systemctl start systemd-timesyncd (not presebt in my debian!!!!)
    
    # sync time in the live environment (maybe not needed after all!
    #sudo apt-get install -y ntp
    #sudo systemctl enable --now ntp && sleep 30s && ntpq -p #sometimes it's needed to restart ntp service to have time sync again!
###    #sudo hwclock --systohc (not needed most probably)
    
###    #sync time in chroot (needed to download python3-anytree) #these two lines are probably not needed (test next time)    
###    # date_host=$(date '+%Y-%m-%d-%H:%M:%S') sudo -E chroot /mnt /bin/bash -c 'date -s $date_host'
###    #sudo chroot /mnt date -s "2022-06-17 14:25:00"
    
###    #os.system("sudo wget http://bit.ly/3xV2F5o -O /mnt/tmp/anytree")
###    #os.system("sudo chroot /mnt dpkg -i /tmp/anytree")
    #os.system("echo "deb http://www.deb-multimedia.org bullseye main" | sudo tee -a /mnt/etc/apt/sources.list.d/multimedia.list > /dev/null
    #os.system("sudo chroot /mnt apt update -oAcquire::AllowInsecureRepositories=true")
    #os.system("sudo chroot /mnt apt-get install deb-multimedia-keyring") # NOT NEEDED as it says already installed (revisison: needed if not installing from bit.ly)
#NOT SURE IF NEEDED    #os.system("sudo chroot /mnt apt-get install ca-certificates") # I believe this is needed! <--- running this spits out error that log cannot be written and complains /dev/pts not mounted, so I think I should do the 4 mounts before doing this.
    #os.system("sudo chroot /mnt apt-get install python3-anytree")
    




chroot /home/mayank/chroot/codebase /bin/bash <<"EOT"
cd /tmp/so
ls -l
echo $$
EOT



--------------------------------------------------------

apt -o RootDir=/foo ...
dpkg --root=/tmp/dpkgRootDir option, and aptâ€™s RootDir setting. Both of these 
https://searchcode.com/file/94878737/config-files/apt.conf/
https://askubuntu.com/questions/196059/how-to-modify-settings-in-apt-conf-file-that-no-longer-exists-in-12-04
https://www.linuxquestions.org/questions/debian-26/changing-apt-and-dpkg-paths-with-apt-conf-via-$apt_config-4175592224/


/et/apt/apt.comf
Dir {
    RootDir "XYZ";
};

--------------------------------------------------------


# This post helped to fix the "efi variable not available in this system" error: https://bbs.archlinux.org/viewtopic.php?id=168516






# find distro
https://stackoverflow.com/questions/43540782/python-use-different-function-depending-on-os



Add bedrock linux to https://distro.readthedocs.io/en/latest/
https://bedrocklinux.org/1.0beta2/strata.html
Fedora Rawhide with ash

In astpk.py, if we add sudo at the beginning of all commands, maybe it'll make it so non-root users with sudoers privelge can run ast too (which is good)
https://manpages.debian.org/bullseye/multistrap/multistrap.1.en.html

Debiash:
#https://forum.openmediavault.org/index.php?thread/12070-guide-debootstrap-installing-debian-into-a-folder-in-a-running-system/



Gentash Linux
Fedorash Linux
Slash Linux (slackware)
OpenBSDash
NetBSDash
FreeBSDash
Centash




https://github.com/saltstack/salt/blob/master/salt/grains/core.py#L1624




sudo apt-get purge <PACKAGENAME>
sudo apt-get purge $(apt-cache depends <PACKAGENAME> | awk '{ print $2 }' | tr '\n' ' ')
sudo apt-get autoremove





what is left:
do step 2 but until chmod ing /mnt/tmp

stop there and go to the example vm, and try installing something. If permission error on tmp, then that tmp chmod is needed, otherwise just remove that commented line


tautology





--------------- lines removed from source files to make it smaller --------------------------------------------------------
### THIS LINE IS MOVED DOWN (my recent PR fix)    os.system("sudo chroot /mnt btrfs sub set-default /.snapshots/rootfs/snapshot-tmp") #This gives the error, should likely be moved to line 206

    #Note: After changing the default subvolume on a system with GRUB, you should run grub-install again to notify the bootloader of the changes.
    #Changing the default subvolume with btrfs subvolume set-default will make the top level of the filesystem inaccessible, except by use of the subvol=/ or subvolid=5 mount options [6].






#   os.system("sudo chroot /mnt modprobe efivarfs") THis may NOT be needed as when I ran without it, I got a warning: "EFI variables are not supported on this system"




#   os.system("sudo chroot /mnt modprobe efivarfs") THis may NOT be needed as when I ran without it, I got a warning: "EFI variables are not supported on this system"
    os.system("sudo mount -o bind /sys/firmware/efi/efivars /mnt/sys/firmware/efi/efivars") #maybe move this up top when I am doing all the other mountings



#    os.system("sudo umount /mnt/dev") #not existing (maybe not needed?)
#    os.system("sudo umount /mnt/proc") #not existing (maybe not needed?)
#    os.system("sudo umount /mnt/sys") #not existing (maybe not needed?)

----------------------------------------------------------------------------------------------------------------
visceral


bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"












sudo apt-get clean
sudo apt-get autoclean




moolah = money for mollahs


zfs snapshots for bsdashos

regarding extending support to oses  that don;t support btrfs: is it possibke to have a portion of disk formtateted as btrfs for ashos and taht would act
as pointer, keeypign track of what is what and where. Something like MBR, keeping addresses on btrfs but the acual file system could be anything (xfs, ext3, dragonfly etc)




open one of the vms debiast and see if all mountponnt are combined and scrambled even ferom before instaklers?


the reason Im not deleting the temporary debian-ashos-installer vms is if I have some interesting useful commands in thier the bash history
